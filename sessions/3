let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <S-Tab> =BackwardsSnippet()
imap <C-S-Space> <Plug>SuperTabBackward
imap <C-Space> <Plug>SuperTabForward
inoremap <C-Tab> 	
snoremap <silent> 	 i<Right>=TriggerSnippet()
snoremap  b<BS>
snoremap % b<BS>%
snoremap ' b<BS>'
xmap S <Plug>VSurround
snoremap U b<BS>U
vmap [% [%m'gv``
vmap \ds :s/^\s\+
vmap \be :BufExplorer
snoremap \ b<BS>\
nmap <silent> \ups :call Perl_RemoveGuiMenus()
nmap <silent> \lps :call Perl_CreateGuiMenus()
nmap <silent> \ucs :call C_RemoveGuiMenus()
nmap <silent> \lcs :call C_CreateGuiMenus()
nmap \ca <Plug>NERDCommenterAltDelims
xmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
xmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
xmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
nmap \cA <Plug>NERDCommenterAppend
xmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
xmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
xmap \ci <Plug>NERDCommenterInvert
nmap \ci <Plug>NERDCommenterInvert
nmap \c$ <Plug>NERDCommenterToEOL
xmap \cn <Plug>NERDCommenterNested
nmap \cn <Plug>NERDCommenterNested
xmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
xmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
xmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
nmap <silent> \ubs :call BASH_RemoveGuiMenus()
nmap <silent> \lbs :call BASH_CreateGuiMenus()
omap \be :BufExplorer
map \g :GundoToggle
nmap \a :Ack!
nnoremap <silent> \sw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/
nnoremap \mh :call InsertCmd( 'hostname' )<Right>
nnoremap \my iMike Dacre (Salk @:call InsertCmd( 'hostname' )<Right>) =strftime("%d-%m-%y %H:%M:%S") 
nnoremap \me iMike Dacre 
nnoremap \dl "=strftime("%a %d %b %Y %X %Z")P
nnoremap \dt "=strftime("%T")P
nnoremap \ds "=strftime("%m/%d/%y")P
nnoremap \dd "=strftime("%d-%m-%y %H:%M:%S")P
omap \ds :s/^\s\+
map \l "*
map \lp "*p
map \ll "*y$
map \PP :set nopaste:set expandtab
map \pp :set paste:set noexpandtab
map \tl <Plug>TaskList
map \tm :tabmove
map \tc :tabclose
map \te :tabedit
map \tn :tabnew
nmap ]t :PBoB
nmap ]e :PEoB
nmap ]< ]tV]e<
nmap ]> ]tV]e>
nmap ]# :call PythonCommentSelection()
nmap ]u :call PythonUncommentSelection()
nmap ]J :call PythonDec("class", -1)
nmap ]j :call PythonDec("class", 1)
nmap ]F :call PythonDec("function", -1)
nmap ]f :call PythonDec("function", 1)
vmap ]f :call PythonDec("function", 1)
omap ]f :call PythonDec("function", 1)
vmap ]F :call PythonDec("function", -1)
omap ]F :call PythonDec("function", -1)
vmap ]j :call PythonDec("class", 1)
omap ]j :call PythonDec("class", 1)
vmap ]J :call PythonDec("class", -1)
omap ]J :call PythonDec("class", -1)
map ]<Down> :call PythonNextLine(1)
map ]<Up> :call PythonNextLine(-1)
map ]d :call PythonSelectObject("function")
map ]c :call PythonSelectObject("class")
vmap ]u :call PythonUncommentSelection()
omap ]u :call PythonUncommentSelection()
vmap ]# :call PythonCommentSelection()
omap ]# :call PythonCommentSelection()
vmap ]> >
omap ]> ]tV]e>
vmap ]< <
omap ]< ]tV]e<
map ]v ]tV]e
vmap ]e :PEoBm'gv``
omap ]e :PEoB
vmap ]t :PBOBm'gv``
omap ]t :PBoB
vmap ]% ]%m'gv``
snoremap ^ b<BS>^
snoremap ` b<BS>`
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
xnoremap <silent> s :echoerr 'surround.vim: Visual mode s has been removed in favor of S'
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
nnoremap <S-Right> <Right>
nnoremap <S-Left> <Left>
nnoremap <S-Down> <Down>
nnoremap <S-Up> <Up>
noremap <F6> :NERDTree
noremap <F5> :TlistToggle
imap  
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =TriggerSnippet()
imap  <Plug>SuperTabForward
imap  <Plug>SuperTabBackward
inoremap <silent> 	 =ShowAvailableSnips()
imap  <Plug>Isurround
inoremap \mh :call InsertCmd( 'hostname' )<Right> 
inoremap \my Mike Dacre (Salk @:call InsertCmd( 'hostname' )<Right>) =strftime("%d-%m-%y %H:%M:%S") 
inoremap \me Mike Dacre 
inoremap \dl =strftime("%c")
inoremap \dt =strftime("%T")
inoremap \ds =strftime("%m/%d/%y")
inoremap \dd =strftime("%d-%m-%y %H:%M:%S")
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set backspace=indent,eol,start
set backupdir=~/.temp/backup
set cindent
set completeopt=menuone,longest,preview
set diffopt=filler,context:9999
set directory=~/.temp/swap
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set guicursor=
set guioptions=aegimt
set helplang=en
set history=50000
set hlsearch
set incsearch
set laststatus=2
set lazyredraw
set listchars=tab:^^
set makeef=error.err
set matchtime=2
set mouse=a
set nrformats=
set omnifunc=syntaxcomplete#Complete
set pastetoggle=<F10>
set ruler
set runtimepath=~/.vim,~/.vim/bundle/ack,~/.vim/bundle/bashsupport,~/.vim/bundle/bufexplorer,~/.vim/bundle/commenter,~/.vim/bundle/csupport,~/.vim/bundle/fugitive,~/.vim/bundle/gundo,~/.vim/bundle/matchit,~/.vim/bundle/nerdtree,~/.vim/bundle/pep8,~/.vim/bundle/perlsupport,~/.vim/bundle/pythonmenu,~/.vim/bundle/pythonsyntax,~/.vim/bundle/rplugin,~/.vim/bundle/screen,~/.vim/bundle/sessionman,~/.vim/bundle/snipmate,~/.vim/bundle/superbtab,~/.vim/bundle/surround,~/.vim/bundle/taglist,~/.vim/bundle/tasklist,~/.vim/bundle/vim-git,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim73,/usr/local/share/vim/vimfiles/after,~/.vim/bundle/snipmate/after,~/.vim/after
set scrolloff=8
set selectmode=key
set sessionoptions=blank,buffers,curdir,folds,globals,help,localoptions,options,resize,winsize,winpos
set shellredir=>%s\ 2>&1
set shiftround
set shiftwidth=2
set showcmd
set showfulltag
set showmatch
set smartcase
set smartindent
set statusline=%<%F\ %h%m%r%h%w%y\ %{fugitive#statusline()}%=\ col:%c%V\ %P
set tabstop=2
set tags=./tags,tags,./tags,./../tags,./**/tags,tags,.vim/tags
set undodir=~/.temp/undo
set undofile
set undoreload=50000
set updatetime=1000
set viminfo='10,\"100,:20,%,n~/.viminfo
set virtualedit=all
set wildmenu
set wildmode=list:longest,full
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
let NERDTreeMapPreviewSplit = "gi"
let C_Dictionary_File = "/home/mike/.vim/bundle/csupport/c-support/wordlists/c-c++-keywords.list,/home/mike/.vim/bundle/csupport/c-support/wordlists/k+r.list,/home/mike/.vim/bundle/csupport/c-support/wordlists/stl_index.list"
let NERDTreeMapCloseChildren = "X"
let Tlist_Sort_Type = "order"
let Tlist_Process_file_Always =  1 
let NERDTreeShowHidden = "0"
let ScreenShellSession = "/tmp/vCT8jof/2"
let SuperTabDefaultCompletionType = "context"
let Tlist_Enable_Fold_Column =  1 
let ScreenShellBootstrapped =  1 
let Tlist_Use_SingleClick =  0 
let SuperTabLongestHighlight =  0 
let Perl_PerlRegexAnalyser = "no"
let NERDTreeMapCloseDir = "x"
let ScreenShellQuitOnVimExit =  1 
let Tlist_Show_One_File =  0 
let NERDTreeMinimalUI = "0"
let NERDUsePlaceHolders = "1"
let NERDTreeShowLineNumbers = "0"
let Tlist_Compact_Format =  0 
let Perl_MenuHeader = "yes"
let ScreenVersion = "1.5"
let Tlist_Use_Horiz_Window =  0 
let ScreenShellExpandTabs =  0 
let NERDTreeBookmarksFile = "/home/mike/.NERDTreeBookmarks"
let Perl_Version = "4.14"
let NERDTreeMapToggleHidden = "I"
let NERDTreeWinSize = "31"
let NERDTreeSortDirs = "1"
let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
let Perl_CodeSnippets = "/home/mike/.vim/bundle/perlsupport//perl-support/codesnippets/"
let SuperTabCrClosePreview =  0 
let NERDRemoveExtraSpaces = "0"
let SuperTabCrMapping =  1 
let Tlist_Process_File_Always =  0 
let NERDTreeMapPreview = "go"
let NERDTreeMapActivateNode = "o"
let NERDTreeWinPos = "left"
let NERDTreeMapMenu = "m"
let ScreenShellCmd = "VIMRPLUGIN_TMPDIR=/tmp/r-plugin-mike R"
let NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"
let Perl_Installation = "local"
let Tlist_Display_Tag_Scope =  1 
let NERDTreeMapOpenInTabSilent = "T"
let NERDTreeMapHelp = "?"
let NERDTreeMapJumpParent = "p"
let NERDTreeMapToggleFilters = "f"
let SuperTabMappingForward = "<c-space>"
let NERDTreeAutoCenter = "1"
let SuperTabContextDefaultCompletionType = "<c-p>"
let TagList_title = "__Tag_List__"
let ScreenShellExternal =  0 
let NERDTreeMapJumpPrevSibling = "<C-k>"
let Perl_PerlRegexSubstitution = "$~"
let ScreenImpl = "Tmux"
let NERDTreeShowBookmarks = "0"
let NERDMenuMode = "3"
let BASH_Dictionary_File = "/home/mike/.vim/bundle/bashsupport/bash-support/wordlists/bash.list"
let NERDDefaultNesting = "1"
let NERDTreeMapOpenInTab = "t"
let NERDTreeRemoveDirCmd = "rm -rf "
let ScreenShellSendSuffix = ""
let NERDTreeChDirMode = "0"
let ScreenShellAttachTargetCurrent =  0 
let Tlist_Highlight_Tag_On_BufEnter =  1 
let SuperTabMappingTabLiteral = "<c-tab>"
let NERDTreeAutoCenterThreshold = "3"
let NERDTreeShowFiles = "1"
let NERDTreeMapOpenSplit = "i"
let NERDTreeCaseSensitiveSort = "0"
let ScreenShellTerminal = ""
let NERDTreeHijackNetrw = "1"
let Tlist_Max_Submenu_Items =  20 
let NERDTreeMapRefresh = "r"
let ScreenShellInitialFocus = "vim"
let NERDTreeHighlightCursorline = "1"
let ScreenShellTmuxInitArgs = ""
let Tlist_GainFocus_On_ToggleOpen =  1 
let NERDLPlace = "[>"
let NERDTreeMouseMode = "1"
let Perl_InterfaceInitialized = "no"
let Tlist_WinHeight =  10 
let SuperTabLongestEnhanced =  0 
let NERDCreateDefaultMappings = "1"
let Tlist_Inc_Winwidth =  1 
let Tlist_Auto_Update =  1 
let NERDTreeMapPreviewVSplit = "gs"
let NERDChristmasTree = "1"
let NERDTreeNotificationThreshold = "100"
let NERDTreeMapJumpRoot = "P"
let Tlist_Auto_Highlight_Tag =  1 
let Perl_Root = "&Perl."
let BufExplorer_title = "[Buf List]"
let NERDTreeMapChdir = "cd"
let ScreenShellScreenInitArgs = ""
let NERDRPlace = "<]"
let Tlist_Exit_OnlyWindow =  0 
let NERDTreeMapToggleZoom = "A"
let Tlist_Display_Prototype =  0 
let NERDTreeMapRefreshRoot = "R"
let SuperTabMappingBackward = "<s-c-space>"
let Perl_Dictionary_File = "/home/mike/.vim/bundle/perlsupport//perl-support/wordlists/perl.list"
let Perl_PerlTags = "off"
let Tlist_Max_Tag_Length =  10 
let NERDRemoveAltComs = "1"
let NERDTreeMapJumpLastChild = "J"
let NERDTreeMapOpenVSplit = "s"
let ScreenShellSendPrefix = ""
let Tlist_WinWidth =  30 
let ScreenShellWindow = "screenshell"
let Perl_OutputGvim = "vim"
let NERDTreeMapDeleteBookmark = "D"
let NERDBlockComIgnoreEmpty = "0"
let Tlist_Close_On_Select =  0 
let NERDTreeMapJumpNextSibling = "<C-j>"
let Tlist_File_Fold_Auto_Close =  0 
let Tlist_Auto_Open =  0 
let ScreenShellActive =  1 
let NERDSpaceDelims = "0"
let NERDCommentWholeLinesInVMode = "0"
let NERDTreeCopyCmd = "cp -r "
let BASH_Version = "3.9"
let SuperTabRetainCompletionDuration = "insert"
let NERDTreeMapQuit = "q"
let ScreenShellWidth =  -1 
let NERDTreeMapChangeRoot = "C"
let NERDCompactSexyComs = "0"
let LargeFile =  100 
let NERDTreeMapToggleFiles = "F"
let NERDAllowAnyVisualDelims = "1"
let NERDTreeDirArrows = "1"
let NERDTreeMapOpenExpl = "e"
let NERDTreeMapJumpFirstChild = "K"
let NERDTreeMapOpenRecursively = "O"
let NERDTreeMapToggleBookmarks = "B"
let ScreenShellHeight =  15 
let C_Version = "5.17"
let NERDTreeMapUpdir = "u"
let ScreenShellGnuScreenVerticalSupport = ""
let NERDTreeMapUpdirKeepOpen = "U"
let NERDTreeQuitOnOpen = "0"
let Tlist_Show_Menu =  0 
let Tlist_Use_Right_Window =  1 
silent only
cd ~/Mito/GWAtoolbox
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +13 ~/.tmux.conf
badd +1 test.R
silent! argdel *
set lines=57 columns=135
edit test.R
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
nnoremap <buffer> <silent> \rf :call StartR("R")
nnoremap <buffer> <silent> \rv :call StartR("vanilla")
nnoremap <buffer> <silent> \rc :call StartR("custom")
nnoremap <buffer> <silent> \rq :call RQuit('nosave')
nnoremap <buffer> <silent> \rw :call RQuit('save')
nnoremap <buffer> <silent> \xx :call RComment("normal")
nnoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> \rl :call SendCmdToR("ls()")
nnoremap <buffer> <silent> \rr :call RClearConsole()
nnoremap <buffer> <silent> \rm :call RClearAll()
nnoremap <buffer> <silent> \rp :call RAction("print")
nnoremap <buffer> <silent> \rn :call RAction("names")
nnoremap <buffer> <silent> \rt :call RAction("str")
nnoremap <buffer> <silent> \ra :call RAction("args")
nnoremap <buffer> <silent> \re :call RAction("example")
nnoremap <buffer> <silent> \rh :call RAction("help")
nnoremap <buffer> <silent> \rs :call RAction("summary")
nnoremap <buffer> <silent> \rg :call RAction("plot")
nnoremap <buffer> <silent> \rb :call RAction("plot"):call RAction("summary")
nnoremap <buffer> <silent> \ro :call RObjBrowser()
nnoremap <buffer> <silent> \r= :call RObjBrowserOCLists(1)
nnoremap <buffer> <silent> \r- :call RObjBrowserOCLists(0)
nnoremap <buffer> <silent> \rd :call RSetWD()
vnoremap <buffer> <silent> \rd :call RSetWD()
onoremap <buffer> <silent> \rd :call RSetWD()
vnoremap <buffer> <silent> \r- :call RObjBrowserOCLists(0)
onoremap <buffer> <silent> \r- :call RObjBrowserOCLists(0)
vnoremap <buffer> <silent> \r= :call RObjBrowserOCLists(1)
onoremap <buffer> <silent> \r= :call RObjBrowserOCLists(1)
vnoremap <buffer> <silent> \ro :call RObjBrowser()
onoremap <buffer> <silent> \ro :call RObjBrowser()
vnoremap <buffer> <silent> \rb :call RAction("plot"):call RAction("summary")
onoremap <buffer> <silent> \rb :call RAction("plot"):call RAction("summary")
vnoremap <buffer> <silent> \rg :call RAction("plot")
onoremap <buffer> <silent> \rg :call RAction("plot")
vnoremap <buffer> <silent> \rs :call RAction("summary")
onoremap <buffer> <silent> \rs :call RAction("summary")
vnoremap <buffer> <silent> \rh :call RAction("help")
onoremap <buffer> <silent> \rh :call RAction("help")
vnoremap <buffer> <silent> \re :call RAction("example")
onoremap <buffer> <silent> \re :call RAction("example")
vnoremap <buffer> <silent> \ra :call RAction("args")
onoremap <buffer> <silent> \ra :call RAction("args")
vnoremap <buffer> <silent> \rt :call RAction("str")
onoremap <buffer> <silent> \rt :call RAction("str")
vnoremap <buffer> <silent> \rn :call RAction("names")
onoremap <buffer> <silent> \rn :call RAction("names")
vnoremap <buffer> <silent> \rp :call RAction("print")
onoremap <buffer> <silent> \rp :call RAction("print")
vnoremap <buffer> <silent> \rm :call RClearAll()
onoremap <buffer> <silent> \rm :call RClearAll()
vnoremap <buffer> <silent> \rr :call RClearConsole()
onoremap <buffer> <silent> \rr :call RClearConsole()
vnoremap <buffer> <silent> \rl :call SendCmdToR("ls()")
onoremap <buffer> <silent> \rl :call SendCmdToR("ls()")
noremap <buffer> <silent> \d :call SendLineToR("down")0
noremap <buffer> <silent> \l :call SendLineToR("stay")0
noremap <buffer> <silent> \pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> \pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> \pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> \pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> \sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> \sd :call SendSelectionToR("silent", "down")
vnoremap <buffer> <silent> \se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> \ss :call SendSelectionToR("silent", "stay")
vnoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")
noremap <buffer> <silent> \ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> \bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> \be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> \bb :call SendMBlockToR("silent", "stay")
noremap <buffer> <silent> \ao :call ShowRout()
noremap <buffer> <silent> \ae :call SendFileToR("echo")
noremap <buffer> <silent> \aa :call SendFileToR("silent")
vnoremap <buffer> <silent> \; :call MovePosRCodeComment("selection")
onoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")
vnoremap <buffer> <silent> \xx :call RComment("selection")
onoremap <buffer> <silent> \xx :call RComment("normal")
vnoremap <buffer> <silent> \rw :call RQuit('save')
onoremap <buffer> <silent> \rw :call RQuit('save')
vnoremap <buffer> <silent> \rq :call RQuit('nosave')
onoremap <buffer> <silent> \rq :call RQuit('nosave')
vnoremap <buffer> <silent> \rc :call StartR("custom")
onoremap <buffer> <silent> \rc :call StartR("custom")
vnoremap <buffer> <silent> \rv :call StartR("vanilla")
onoremap <buffer> <silent> \rv :call StartR("vanilla")
vnoremap <buffer> <silent> \rf :call StartR("R")
onoremap <buffer> <silent> \rf :call StartR("R")
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> \rd :call RSetWD()a
inoremap <buffer> <silent> \r- :call RObjBrowserOCLists(0)a
inoremap <buffer> <silent> \r= :call RObjBrowserOCLists(1)a
inoremap <buffer> <silent> \ro :call RObjBrowser()a
inoremap <buffer> <silent> \rb :call RAction("plot"):call RAction("summary")a
inoremap <buffer> <silent> \rg :call RAction("plot")a
inoremap <buffer> <silent> \rs :call RAction("summary")a
inoremap <buffer> <silent> \rh :call RAction("help")a
inoremap <buffer> <silent> \re :call RAction("example")a
inoremap <buffer> <silent> \ra :call RAction("args")a
inoremap <buffer> <silent> \rt :call RAction("str")a
inoremap <buffer> <silent> \rn :call RAction("names")a
inoremap <buffer> <silent> \rp :call RAction("print")a
inoremap <buffer> <silent> \rm :call RClearAll()a
inoremap <buffer> <silent> \rr :call RClearConsole()a
inoremap <buffer> <silent> \rl :call SendCmdToR("ls()")a
inoremap <buffer> <silent> \q :call SendLineToR("newline")a
inoremap <buffer> <silent> \d :call SendLineToR("down")0i
inoremap <buffer> <silent> \l :call SendLineToR("stay")0i
inoremap <buffer> <silent> \pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> \pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> \pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> \pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> \fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> \fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> \fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> \ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> \ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> \bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> \be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> \bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> \ao :call ShowRout()a
inoremap <buffer> <silent> \ae :call SendFileToR("echo")a
inoremap <buffer> <silent> \aa :call SendFileToR("silent")a
inoremap <buffer> <silent> \; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> \xx :call RComment("normal")a
inoremap <buffer> <silent> \rw :call RQuit('save')a
inoremap <buffer> <silent> \rq :call RQuit('nosave')a
inoremap <buffer> <silent> \rc :call StartR("custom")a
inoremap <buffer> <silent> \rv :call StartR("vanilla")a
inoremap <buffer> <silent> \rf :call StartR("R")a
imap <buffer> <silent> _ :call ReplaceUnderS()a
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=b:#,b:##,b:###
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'r'
setlocal filetype=r
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=9999
setlocal foldlevel=9999
set foldmarker={,}
setlocal foldmarker={,}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=rcomplete#CompleteR
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'r'
setlocal syntax=r
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
let s:l = 1 - ((0 * winheight(0) + 27) / 55)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
lcd ~/Mito/GWAtoolbox
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
