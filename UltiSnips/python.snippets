snippet ffile "For i in file, split" b
for i in ${1:infile}:
	f = i.rstrip().split('${2:\t}')
	$0
endsnippet

snippet longdesc "Long Description" b
"""
============================================================================
${1:
          FILE: ${2:`!v expand('%:t')`}}${3:
           DIR: ${4:`!v expand('%:p:h')`}}${5:
        AUTHOR: Michael D Dacre, mike.dacre@gmail.com}${6:
  ORGANIZATION: Stanford University}${7:
       LICENSE: MIT License, property of Stanford, use as you wish}${8:
       VERSION: ${9:0.1}}
       CREATED: `date +"%Y-%M-%d %H:%m"`
 Last modified: 2016-01-09 08:23 ${10:

   DESCRIPTION: ${11}}${12:

         USAGE: ${13:Import as a module or run as a script}}

============================================================================
"""
$14
endsnippet

snippet desc "Short Docstring" b
"""
       CREATED: `date +"%Y-%M-%d %H:%m"`
 Last modified:

 ${1}
"""
${2}
endsnippet

snippet cl "Make a cell from a block of text" b
##
${VISUAL}${1}
##
endsnippet

snippet bamfile
bamfile = subprocess.Popen('samtools view '+BAMFILE, stdout=subprocess.PIPE, shell=True)
for line in bamfile.stdout:
endsnippet

snippet gzipped
def open_gzipped(infile, mode='rb'):
	""" Return file handle of file regardless of gzipped or not """
	import gzip
	import bz2
	mode = 'rb' if mode == 'r' else mode
	mode = 'wb' if mode == 'w' else mode
	mode = 'ab' if mode == 'a' else mode
	if hasattr(infile, 'write'):
		return infile
	if isinstance(infile, str):
		if infile.endswith('.gz'):
			return gzip.open(infile, mode)
		if infile.endswith('.bz2'):
			return bz2.open(infile, mode)

endsnippet

snippet parg "Positional argument" b
	${1:parser}.add_argument('${2:file}'${3:, type=argparse.FileType('${4:r}'),}
	              ${1/./ /g}help="${5:Input file}")
endsnippet

snippet oarg "Optional argument" b
	${1:parser}.add_argument('-${2:v}', '--${3:verbose}'${4:, action="${5:store_true}"},
	              ${1/./ /g}help="${6:Verbose output}")
endsnippet

snippet garg1 "Argument group one member" b
	# ${1:Arguments}
	${2:group} = parser.add_argument_group('${3:Group}')
	$2.add_argument(${4:'-${5:b}', }'${4/.+/--/}${6:bob}',
	              ${2/./ /g}help="${6:Input file, Default STDIN}")
endsnippet

snippet garg2 "Argument group two members" b
	# ${1:Arguments}
	${2:group} = parser.add_argument_group('${3:Group}')
	$2.add_argument(${4:'-${5:b}', }'${4/.+/--/}${6:bob}',
	              ${2/./ /g}help="$7")
	$2.add_argument(${8:'-${9:b}', }'${8/.+/--/}${10:bob}',
	              ${2/./ /g}help="$11")
endsnippet

snippet garg3 "Argument group three members" b
	# ${1:Arguments}
	${2:group} = parser.add_argument_group('${3:Group}')
	$2.add_argument(${4:'-${5:b}', }'${4/.+/--/}${6:bob}',
	              ${2/./ /g}help="$7")
	$2.add_argument(${8:'-${9:b}', }'${8/.+/--/}${10:bob}',
	              ${2/./ /g}help="$11")
	$2.add_argument(${12:'-${13:b}', }'${12/.+/--/}${14:bob}',
	              ${2/./ /g}help="$15")
endsnippet

snippet garg4 "Argument group four members" b
	# ${1:Arguments}
	${2:group} = parser.add_argument_group('${3:Group}')
	$2.add_argument(${4:'-${5:b}', }'${4/.+/--/}${6:bob}',
	              ${2/./ /g}help="$7")
	$2.add_argument(${8:'-${9:b}', }'${8/.+/--/}${10:bob}',
	              ${2/./ /g}help="$11")
	$2.add_argument(${12:'-${13:b}', }'${12/.+/--/}${14:bob}',
	              ${2/./ /g}help="$15")
	$2.add_argument(${16:'-${17:b}', }'${16/.+/--/}${18:bob}',
	              ${2/./ /g}help="$19")
endsnippet

snippet args "General Command Line Arguments"
import argparse
def main(argv=None):
	""" ${1:Run as a script} """
	if not argv:
	    argv = sys.argv

	parser  = argparse.ArgumentParser(
	    description=__doc__,
	    formatter_class=argparse.RawDescriptionHelpFormatter)
${2:
	# ${3:Positional arguments}
	parser.add_argument('${4:files}'${5:, nargs='+',}
	                    help="${6:Input files}")}
${7:
	# ${8:Optional flags}
	parser.add_argument('-${9:b}', '--${10:bob}'${11:, action="${12:store_true}"},
	                    help="${13:Verbose output}")}
${14:
	# ${15:Optional Files}
	optfiles = parser.add_argument_group('${16:Optional Files}')${17:
	optfiles.add_argument('-i', '--infile', nargs='?', default=sys.stdin,
	                      help="${18:Input file, Default STDIN}")}${19:
	optfiles.add_argument('-o', '--outfile', nargs='?', default=sys.stdout,
	                      help="${20:Output file, Default STDOUT}")}${21:
	optfiles.add_argument('-l', '--logfile', nargs='?', default=sys.stderr,
	                      help="${22:Log File, Default STDERR (append mode)}")}}

	args = parser.parse_args(argv)

if __name__ == '__main__' and '__file__' in globals():
	sys.exit(main())
endsnippet

snippet stdarg "Optional positional files" b
import argparse
	$18
	""" ${21:Run everything} """
	$0

def main(argv=None):
	""" ${1:Run as a script} """
	if not argv:
	    argv = sys.argv

	parser  = argparse.ArgumentParser(
	    description=__doc__,
	    formatter_class=argparse.RawDescriptionHelpFormatter)

${2:
	# Optional arguments
	parser.add_argument('-${3:f}', '--${4:flag}',${5: action='store_true',}
	                    help='${6:A flag}')}

	# Optional files${7:
	parser.add_argument(${8:'-i', }'${8/.+/--/}${9:infile}'${8/.+/, nargs='?'/}, default=sys.stdin,
	                    type=argparse.FileType('r'),
	                    help="${10:Input file} (Default: STDIN)")}${11:
	parser.add_argument(${12:'-o', }'${12/.+/--/}${13:outfile}'${12/.+/, nargs='?'/}, default=sys.stdout,
	                    type=argparse.FileType('w'),
	                    help="${14:Output file} (Default: STDOUT)")}${15:
	parser.add_argument('-l', '--${16:logfile}', nargs='?', default=sys.stderr,
	                    type=argparse.FileType('a'),
	                    help="${17:Log file} (Default: STDERR)")}

	args = parser.parse_args(argv)

	${18:${19:`!v expand('%:r')`}(${7/.+/infile=args./}$9${7/.+/, /}${11/.+/outfile=args./}$13${16/.+/:, logfile=args./}$16${2/.+/,
	 /}${20:${19/./ /g}}${2/.+/args./}$4)}

if __name__ == '__main__' and '__file__' in globals():
	sys.exit(main())
endsnippet
