snippet #!
	#!/usr/local/bin/python3

snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet stdarg
	import argparse, sys
	
	def get_args():
		# Get command line arguments
		parser = argparse.ArgumentParser(
		             description=__doc__,
		             formatter_class=argparse.RawDescriptionHelpFormatter)
		
		# Optional Arguments
		#parser.add_argument('${1:-r}', help="${2:Optional argument}")
		
		# Required Files
		#parser.add_argument('${3:file}', nargs='1', type=argparse.FileType('r'),
		#                    help="${4:Required file}")
		
		# Optional Files
		parser.add_argument('-i', '--infile', nargs='?', type=argparse.FileType('r'),
		                    default=sys.stdin, help="${5:Input file, Default STDIN}")
		parser.add_argument('-o', '--outfile', nargs='?', type=argparse.FileType('w'),
		                    default=sys.stdout, help="Output file, Default STDOUT")
		parser.add_argument('-l', '--logfile', nargs='?', type=argparse.FileType('a'),
		                    default=sys.stderr, help="Log File, Default STDERR (append mode)")
		
		return parser
	
	# Main function for direct running
	if __name__ == '__main__':
			# Get commandline arguments
			parser = get_args()
			args = parser.parse_args()

			# ${6:Do Stuff}
			${7}
