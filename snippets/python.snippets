snippet #!
	#!/usr/bin/env python3

snippet ftb
	f = ${1:i}.rstrip().split('${2:\t}')
	${3:#Next}
snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet tryelse Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet tryfinal Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet tryelsef Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet iffile
	if isinstance(${1:args.infile}, str):
		${2:infile} = open(${3:$1}, '${4:r}')
	else:
		${5:$2} = ${6:$1}
snippet ifwith
	if isinstance(${1:args.outfile}, str):
		with open(${2:$1}, '${3:w}') as ${4:outfile}:
			${5:run_all}(${6:$4})
	else:
		${7:$5}(${8:$1})
snippet bamfile
	bamfile = subprocess.Popen('samtools view '+BAMFILE, stdout=subprocess.PIPE, shell=True)
	for line in bamfile.stdout:
snippet gzipped
	# Check if gzipped
	with open(infile) as f:
	    head = f.read(3)
	# Open
	f = gzip.open(infile, 'rb') if head == "\x1f\x8b\x08" else open(infile, 'rb')
snippet stdarg
	def main(files, outfile=sys.stdout, logfile=sys.stderr,
	         verbose=False):
	    """ Run everything """

	##
	if __name__ == '__main__':
	    """Command Line Argument Parsing"""
	    import argparse

	    f_class = argparse.RawDescriptionHelpFormatter
	    parser  = argparse.ArgumentParser(description=__doc__,
	                                      formatter_class=f_class)

	    # Input files
	    # parser.add_argument('files', nargs='+',
	    #                     help="The duplicate stats files from rmdup")

	    # Optional Files
	    parser.add_argument('-i', '--infile', nargs='?', default=sys.stdin,
	                        help="Input file, Default STDIN")
	    parser.add_argument('-o', '--outfile', nargs='?', default=sys.stdout,
	                        type=argparse.FileType('w'),
	                        help="Output file, Default STDOUT")
	    parser.add_argument('-l', '--logfile', nargs='?', default=sys.stderr,
	                        type=argparse.FileType('a'),
	                        help="Log File, Default STDERR (append mode)")

	    # Debugging flags
	    parser.add_argument('-v', '--verbose', action="store_true",
	                        help="Verbose output")

	    args = parser.parse_args()
	    arg_list = (args.files, args.outfile, args.logfile,
	                args.verbose)

	    # Run the script
	    main(*arg_list)
